// <auto-generated> This file has been auto generated by EF Core Power Tools. </auto-generated>
#nullable disable
using System;
using System.Collections.Generic;
using System.Data;
using Bogus;
using Bogus.DataSets;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Metadata.Internal;

namespace fussballliga.Models
{
    public partial class SoccerLeagueContext : DbContext
    {
        public SoccerLeagueContext()
        {
        }

        public SoccerLeagueContext(DbContextOptions<SoccerLeagueContext> options)
            : base(options)
        {
        }

        public virtual DbSet<Game> Games { get; set; }
        public virtual DbSet<Goal> Goals { get; set; }
        public virtual DbSet<League> Leagues { get; set; }
        public virtual DbSet<Player> Players { get; set; }
        public virtual DbSet<Team> Teams { get; set; }
        public virtual DbSet<TeamPlayer> TeamPlayers { get; set; }
        public virtual DbSet<TeamTrainer> TeamTrainers { get; set; }
        public virtual DbSet<Trainer> Trainers { get; set; }

        protected override void OnConfiguring(DbContextOptionsBuilder optionsBuilder)
        {
            if (!optionsBuilder.IsConfigured)
            {
#warning To protect potentially sensitive information in your connection string, you should move it out of source code. You can avoid scaffolding the connection string by using the Name= syntax to read it from configuration - see https://go.microsoft.com/fwlink/?linkid=2131148. For more guidance on storing connection strings, see http://go.microsoft.com/fwlink/?LinkId=723263.
                optionsBuilder.UseSqlServer("Data Source=127.0.0.1;Initial Catalog=SoccerLeague;User ID=sa;Password=SqlServer2019;TrustServerCertificate=True");
            }
        }

        protected override void OnModelCreating(ModelBuilder modelBuilder)
        {
            modelBuilder.Entity<Game>(entity =>
            {
                entity.HasOne(d => d.AwayTeamNavigation)
                    .WithMany(p => p.GameAwayTeamNavigations)
                    .HasForeignKey(d => d.AwayTeam)
                    .HasConstraintName("FK__Game__AwayTeam__32E0915F");

                entity.HasOne(d => d.HomeTeamNavigation)
                    .WithMany(p => p.GameHomeTeamNavigations)
                    .HasForeignKey(d => d.HomeTeam)
                    .HasConstraintName("FK__Game__HomeTeam__31EC6D26");
            });

            modelBuilder.Entity<Goal>(entity =>
            {
                entity.HasKey(e => new { e.Minute, e.GameId })
                    .HasName("PK__Goals__919822447E9C402E");

                entity.HasOne(d => d.Game)
                    .WithMany(p => p.Goals)
                    .HasForeignKey(d => d.GameId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK__Goals__GameId__398D8EEE");

                entity.HasOne(d => d.TeamPlayer)
                    .WithMany(p => p.Goals)
                    .HasForeignKey(d => d.TeamPlayerId)
                    .HasConstraintName("FK__Goals__TeamPlaye__3A81B327");
            });

            modelBuilder.Entity<Team>(entity =>
            {
                entity.HasOne(d => d.League)
                    .WithMany(p => p.Teams)
                    .HasForeignKey(d => d.LeagueId)
                    .HasConstraintName("FK__Team__LeagueId__276EDEB3");
            });

            modelBuilder.Entity<TeamPlayer>(entity =>
            {
                entity.HasOne(d => d.Player)
                    .WithMany(p => p.TeamPlayers)
                    .HasForeignKey(d => d.PlayerId)
                    .HasConstraintName("FK__TeamPlaye__Playe__35BCFE0A");

                entity.HasOne(d => d.Team)
                    .WithMany(p => p.TeamPlayers)
                    .HasForeignKey(d => d.TeamId)
                    .HasConstraintName("FK__TeamPlaye__TeamI__36B12243");
            });

            modelBuilder.Entity<TeamTrainer>(entity =>
            {
                entity.HasOne(d => d.Team)
                    .WithMany(p => p.TeamTrainers)
                    .HasForeignKey(d => d.TeamId)
                    .HasConstraintName("FK__TeamTrain__TeamI__2F10007B");

                entity.HasOne(d => d.Trainer)
                    .WithMany(p => p.TeamTrainers)
                    .HasForeignKey(d => d.TrainerId)
                    .HasConstraintName("FK__TeamTrain__Train__2E1BDC42");
            });

            OnModelCreatingPartial(modelBuilder);
            
        }

        partial void OnModelCreatingPartial(ModelBuilder modelBuilder);

        public void Seed()
        {
            Randomizer.Seed = new Random(1039);
            var faker = new Faker("de");

            var leagues = new Faker<League>("de").CustomInstantiator(f =>
            {
                return new League()
                {
                    Name = f.Name.FirstName(),
                    CreatedOn = f.Date.Past(),
                };
            })
            .Generate(1000)
            .ToList();
            Leagues.AddRange(leagues);
            SaveChanges();
            Console.WriteLine("Created leagues");

            var trainers = new Faker<Trainer>("de").CustomInstantiator(f =>
            {
                return new Trainer()
                {
                    Name = f.Name.FirstName(),
                    BirthDate = f.Date.Between(new DateTime(1975, 01, 01), new DateTime(2000, 01, 01))
                };
            })
            .Generate(1000)
            .ToList();
            Trainers.AddRange(trainers);
            SaveChanges();
            Console.WriteLine("Created trainers");

            var players = new Faker<Player>("de").CustomInstantiator(f =>
            {
                return new Player()
                {
                    Name = f.Name.FirstName(),
                    BirthDate = f.Date.Between(new DateTime(1975, 01, 01), new DateTime(2000, 01, 01))
                };
            })
            .Generate(1000)
            .ToList();
            Players.AddRange(players);
            SaveChanges();
            Console.WriteLine("Created players");

            var teams = new Faker<Team>("de").CustomInstantiator(f =>
            {
                var team = new Team()
                {
                    Name = f.Name.FirstName(),
                    LeagueId = f.Random.ListItem(leagues).Id
                };
                var teamPlayers = new Faker<TeamPlayer>("de").CustomInstantiator(f =>
                {
                    return new TeamPlayer()
                    {
                        PlayerFrom = f.Date.Past(),
                        Player = f.Random.ListItem(players),
                        Team = team
                    };
                })
                .Generate(20)
                .ToList();
                team.TeamPlayers = teamPlayers;

                var teamTrainers = new Faker<TeamTrainer>("de").CustomInstantiator(f =>
                {
                    return new TeamTrainer()
                    {
                        TrainerFrom = f.Date.Past(),
                        Trainer = f.Random.ListItem(trainers),
                        Team = team
                    };
                })
                .Generate(3)
                .ToList();
                return team;
            })
            .Generate(100)
            .GroupBy(a => a.Name).Select(g => g.First())   // (6)
            .ToList();
            Teams.AddRange(teams);
            SaveChanges();
            Console.WriteLine("Created teams");

            var games = new Faker<Game>("de").CustomInstantiator(f =>
            {
                var homeTeam = f.Random.ListItem(teams);
                var awayTeam = f.Random.ListItem(teams.Where(t=>t!=homeTeam).ToList());

                var g =  new Game()
                {
                    GameDate = f.Date.Future(),
                    HomeTeamNavigation = homeTeam,
                    AwayTeamNavigation = awayTeam
                };
                var players = g.HomeTeamNavigation.TeamPlayers.Concat(g.AwayTeamNavigation.TeamPlayers).ToList();

                var goals = new Faker<Goal>("de").CustomInstantiator(f =>
                {
                    return new Goal()
                    {
                        Minute = f.Random.Int(0, 90),
                        Game = g,
                        TeamPlayer = f.Random.ListItem(players)
                    };
                })
                .Generate(f.Random.Int(0, 10))
                .GroupBy(g=>g.Minute).Select(g=>g.First())
                .ToList();
                g.Goals = goals;
                return g;
            })
            .Generate(1000)
            .ToList();
            Games.AddRange(games);
            SaveChanges();
            Console.WriteLine("Created games");


            Console.WriteLine("Finished Seed");
        }
    }
}