// <auto-generated> This file has been auto generated by EF Core Power Tools. </auto-generated>
#nullable disable
using System;
using System.Collections.Generic;
using Bogus;
using Bogus.Bson;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Metadata;
using NationsLeague.Models.NationsLeague.Models;

namespace NationsLeague.Models
{
    public partial class NationsLeagueContext : DbContext
    {
        public NationsLeagueContext()
        {
        }

        public NationsLeagueContext(DbContextOptions<NationsLeagueContext> options)
            : base(options)
        {
        }

        public NationsLeagueContext(DbContextOptions options) : base(options)
        {
        }

        public virtual DbSet<Game> Games { get; set; }
        public virtual DbSet<GameView> GameViews { get; set; }
        public virtual DbSet<Goal> Goals { get; set; }
        public virtual DbSet<Nationality> Nationalities { get; set; }
        public virtual DbSet<Nationsleague> Nationsleagues { get; set; }
        public virtual DbSet<Player> Players { get; set; }
        public virtual DbSet<Team> Teams { get; set; }
        public virtual DbSet<TeamPlayer> TeamPlayers { get; set; }
        public virtual DbSet<TeamTrainer> TeamTrainers { get; set; }
        public virtual DbSet<Trainer> Trainers { get; set; }

        protected override void OnConfiguring(DbContextOptionsBuilder optionsBuilder)
        {
            if (!optionsBuilder.IsConfigured)
            {
#warning To protect potentially sensitive information in your connection string, you should move it out of source code. You can avoid scaffolding the connection string by using the Name= syntax to read it from configuration - see https://go.microsoft.com/fwlink/?linkid=2131148. For more guidance on storing connection strings, see http://go.microsoft.com/fwlink/?LinkId=723263.
                optionsBuilder.UseSqlServer("Data Source=127.0.0.1;Initial Catalog=SoccerLeague;Persist Security Info=True;User ID=sa;Password=SqlServer2019;TrustServerCertificate=True");
            }
        }

        protected override void OnModelCreating(ModelBuilder modelBuilder)
        {
            modelBuilder.Entity<Game>(entity =>
            {
                entity.HasOne(d => d.AwayTeamNavigation)
                    .WithMany(p => p.GameAwayTeamNavigations)
                    .HasForeignKey(d => d.AwayTeam)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK__Game__AwayTeam__3E52440B");

                entity.HasOne(d => d.HomeTeamNavigation)
                    .WithMany(p => p.GameHomeTeamNavigations)
                    .HasForeignKey(d => d.HomeTeam)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK__Game__HomeTeam__3D5E1FD2");
            });

            modelBuilder.Entity<Goal>(entity =>
            {
                entity.HasOne(d => d.Game)
                    .WithMany(p => p.Goals)
                    .HasForeignKey(d => d.GameId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK__Goals__GameId__44FF419A");

                entity.HasOne(d => d.TeamPlayer)
                    .WithMany(p => p.Goals)
                    .HasForeignKey(d => d.TeamPlayerId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK__Goals__TeamPlaye__45F365D3");
            });

            modelBuilder.Entity<Nationsleague>(entity =>
            {

                entity.HasOne(d => d.Nationality)
                    .WithMany(p => p.Nationsleagues)
                    .HasForeignKey(d => d.NationalityId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK__Nationsle__Natio__286302EC");
            });

            modelBuilder.Entity<Player>(entity =>
            {
                entity.HasOne(d => d.Nationality)
                    .WithMany(p => p.Players)
                    .HasForeignKey(d => d.NationalityId)
                    .HasConstraintName("FK__Player__National__35BCFE0A");
            });

            modelBuilder.Entity<Team>(entity =>
            {
                entity.HasOne(d => d.Nationsleague)
                    .WithMany(p => p.Teams)
                    .HasForeignKey(d => d.NationsleagueID)
                    .HasConstraintName("FK__Team__Nationslea__2F10007B");
            });

            modelBuilder.Entity<TeamPlayer>(entity =>
            {
                entity.HasOne(d => d.Player)
                    .WithMany(p => p.TeamPlayers)
                    .HasForeignKey(d => d.PlayerId)
                    .HasConstraintName("FK__TeamPlaye__Playe__412EB0B6");

                entity.HasOne(d => d.Team)
                    .WithMany(p => p.TeamPlayers)
                    .HasForeignKey(d => d.TeamId)
                    .HasConstraintName("FK__TeamPlaye__TeamI__4222D4EF");
            });

            modelBuilder.Entity<TeamTrainer>(entity =>
            {
                entity.HasOne(d => d.Team)
                    .WithMany(p => p.TeamTrainers)
                    .HasForeignKey(d => d.TeamId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK__TeamTrain__TeamI__3A81B327");

                entity.HasOne(d => d.Trainer)
                    .WithMany(p => p.TeamTrainers)
                    .HasForeignKey(d => d.TrainerId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK__TeamTrain__Train__398D8EEE");
            });

            modelBuilder.Entity<Trainer>(entity =>
            {
                entity.HasOne(d => d.Nationality)
                    .WithMany(p => p.Trainers)
                    .HasForeignKey(d => d.NationalityId)
                    .HasConstraintName("FK__Trainer__Nationa__31EC6D26");
            });

            modelBuilder.Entity<Game>().OwnsOne(
                game => game.AdditionalAttributes, ownedNavigationBuilder =>
                {
                    ownedNavigationBuilder.ToJson();
                    ownedNavigationBuilder.OwnsOne(AdditionalAttributes => AdditionalAttributes.Value);
                }
                );

            modelBuilder.Entity<GameView>()
           .HasNoKey()
           .ToView("VGAME");   // Oracle: uppercase

            OnModelCreatingPartial(modelBuilder);
        }

        public void Seed()
        {
            Randomizer.Seed = new Random(1039);
            var faker = new Faker("de");

            var nationalitys = new Faker<Nationality>("de").CustomInstantiator(f =>
            {
                return new Nationality()
                {
                    Name = f.Address.Country(),
                };
            })
            .Generate(50)
            .GroupBy(n => n.Name).Select(g => g.First())
            .ToList();
            Nationalities.AddRange(nationalitys);
            SaveChanges();
            Console.WriteLine("Created nationalities");

            var leagues = new Faker<Nationsleague>("de").CustomInstantiator(f =>
            {
                return new Nationsleague()
                {
                    Name = f.Name.FirstName(),
                    CreatedOn = f.Date.Past(),
                    NationalityId = f.Random.ListItem(nationalitys).Id
                };
            })
            .Generate(1000)
            .GroupBy(l => l.Name).Select(g => g.First())
            .ToList();
            Nationsleagues.AddRange(leagues);
            SaveChanges();
            Console.WriteLine("Created leagues");


            var trainers = new Faker<Trainer>("de").CustomInstantiator(f =>
            {
                return new Trainer()
                {
                    Firstname = f.Name.FirstName(),
                    Lastname = f.Name.LastName(),
                    Nationality = f.Random.ListItem(nationalitys),
                    NationalityId = f.Random.ListItem(nationalitys).Id,
                    BirthDate = f.Date.Between(new DateTime(1975, 01, 01), new DateTime(2000, 01, 01))
                };
            })
            .Generate(1000)
            .ToList();
            Trainers.AddRange(trainers);
            SaveChanges();
            Console.WriteLine("Created trainers");

            var players = new Faker<Player>("de").CustomInstantiator(f =>
            {
                return new Player()
                {
                    Firstname = f.Name.FirstName(),
                    Lastname = f.Name.LastName(),
                    Nationality = f.Random.ListItem(nationalitys),
                    NationalityId = f.Random.ListItem(nationalitys).Id,
                    BirthDate = f.Date.Between(new DateTime(1975, 01, 01), new DateTime(2000, 01, 01))
                };
            })
            .Generate(1000)
            .ToList();
            Players.AddRange(players);
            SaveChanges();
            Console.WriteLine("Created players");

            var teams = new Faker<Team>("de").CustomInstantiator(f =>
            {
                var team = new Team()
                {
                    Name = f.Name.FirstName(),
                    NationsleagueID = f.Random.ListItem(leagues).Id
                };
                var teamPlayers = new Faker<TeamPlayer>("de").CustomInstantiator(f =>
                {
                    return new TeamPlayer()
                    {
                        PlayerFrom = f.Date.Past(),
                        Player = f.Random.ListItem(players),
                        Team = team
                    };
                })
                .Generate(20)
                .ToList();
                team.TeamPlayers = teamPlayers;

                var teamTrainers = new Faker<TeamTrainer>("de").CustomInstantiator(f =>
                {
                    return new TeamTrainer()
                    {
                        TrainerFrom = f.Date.Past(),
                        Trainer = f.Random.ListItem(trainers),
                        Team = team
                    };
                })
                .Generate(3)
                .ToList();
                return team;
            })
            .Generate(100)
            .GroupBy(a => a.Name).Select(g => g.First())   // (6)
            .ToList();
            Teams.AddRange(teams);
            SaveChanges();
            Console.WriteLine("Created teams");

            var games = new Faker<Game>("de").CustomInstantiator(f =>
            {
                var homeTeam = f.Random.ListItem(teams);
                var awayTeam = f.Random.ListItem(teams.Where(t => t != homeTeam).ToList());
                var date = new Date()
                {
                    GameDate = f.Date.Soon(),
                    GameDay = f.Random.Int(1, 9),
                };

                var g = new Game()
                {

                    HomeTeamNavigation = homeTeam,
                    AwayTeamNavigation = awayTeam,
                    AdditionalAttributes = new AdditionalAttribute
                    {
                        Value = new Value(3, DateTime.Now)
                    }
                };
                return g;
            })
            .Generate(1000)
            .ToList();
            Games.AddRange(games);
            SaveChanges();
            Console.WriteLine("Created games");

        }

        partial void OnModelCreatingPartial(ModelBuilder modelBuilder);
    }
}